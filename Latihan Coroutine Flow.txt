Coroutine Flow
Tujuan
Pada codelab kali ini Anda akan belajar membuat AutoCompleteTextView yang menerapkan reactive programming. Target Anda adalah menghasilkan output seperti di bawah ini:

202011051426586ea65f6d45253d475384fad35b3a0dea.gif

Logika Dasar
Menjalankan aplikasi → Menulis beberapa huruf untuk mencari tempat → Melakukan pencarian menggunakan Mapbox API → Menampilkan hasil di dalam AutoCompleteTextView → Pilih lokasi kamu.


Codelab Reactive Search
Pada codelab latihan kali ini Anda akan menggunakan Flow untuk membuat reactive search.

Buat Project baru di Android Studio dengan kriteria sebagai berikut:

Nama Project

MyReactiveSearch

Target & Minimum Target SDK

Phone and Tablet, Api level 21

Tipe Activity

Empty Activity

Activity Name

MainActivity

Language

Kotlin

Pertama kita akan menambahkan library-library yang dibutuhkan terlebih dahulu di build.gradle(Module: app) seperti berikut:

dependencies {
    ...
 
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9"
    implementation "androidx.activity:activity-ktx:1.1.0" //by viewModels()
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0" //lifecycleScope
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0" //asLiveData
}
Selanjutnya kita mulai dengan membuat desain aplikasinya. Buka activity_main.xml dan buat desain seperti berikut:
202008140924097ac5cd7b873afec9667b32efb279e027.jpeg

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_marginTop="8dp"
    android:padding="8dp"
    tools:context=".MainActivity">
 
    <com.google.android.material.textfield.TextInputLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="8dp"
        android:hint="@string/your_place"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent">
        <AutoCompleteTextView
            android:id="@+id/ed_place"
            style="@style/Widget.MaterialComponents.AutoCompleteTextView.FilledBox"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/your_place" />
    </com.google.android.material.textfield.TextInputLayout>
 
</androidx.constraintlayout.widget.ConstraintLayout>
Jangan lupa untuk menambahkan resource teks-nya juga di strings.xml seperti berikut:

<resources>
   <string name="app_name">My Reactive Search</string>
   <string name="your_place">Lokasi Kamu</string>
</resources>
Sebelum melangkah lebih lanjut, di awal telah dijelaskan bahwa Anda akan membuat sebuah form lokasi dengan fitur AutoComplete. Untuk mendapatkan data suatu tempat, Anda akan menggunakan bantuan Mapbox API. Untuk itu silakan mendaftar terlebih dahulu pada halaman berikut: https://account.mapbox.com/auth/signup/ untuk mendapatkan access token.


Setelah usai, lanjutkan dengan Sign in dan Anda akan mendapatkan access token pada halaman awal seperti ini:
20200814092410652d49dbc453a98ba50592f1cb7acb94.jpeg

Kemudian cobalah untuk melakukan suatu pencarian dengan menggunakan format berikut:
https://api.mapbox.com/geocoding/v5/mapbox.places/{KATA_KUNCI_TEMPAT}.json?access_token={ACCESS_TOKEN_ANDA}&autocomplete=true

Catatan:
Anda dapat melihat documentation Search Service pada Mapbox pada halaman berikut : https://docs.mapbox.com/api/search/#geocoding

Berikut ini adalah contoh hasil JSON setelah memanggil endpoint tersebut:
20200814092411f2e365663d1c7ccbebfd116713ae35c2.jpeg
Tips:
Anda bisa menggunakan extension JsonFormatter supaya tampilan JSON menjadi lebih rapi.


Langkah selanjutnya kita buat model berdasarkan hasil JSON dari API tadi. Buat package baru dengan cara klik kanan pada nama package → new → package → beri nama model. Selanjutnya buat dua kelas model di dalamnya seperti berikut:

PlacesItem

data class PlacesItem(
  @field:SerializedName("place_name")
  val placeName: String
)
PlaceResponse

data class PlaceResponse(
  @field:SerializedName("features")
  val features: List<PlacesItem>
)
Lanjut dengan membuat konfigurasi Retrofit. Buat package baru dengan nama network dan buat dua kelas berikut:

ApiService

interface ApiService {
   @GET("mapbox.places/{query}.json")
   suspend fun getCountry(
       @Path("query") query: String,
       @Query("access_token") accessToken: String,
       @Query("autocomplete") autoComplete: Boolean = true
   ): PlaceResponse
}
ApiConfig

object ApiConfig {
   private fun provideOkHttpClient(): OkHttpClient {
       return OkHttpClient.Builder()
           .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))
           .connectTimeout(120, TimeUnit.SECONDS)
           .readTimeout(120, TimeUnit.SECONDS)
           .build()
   }
 
   fun provideApiService(): ApiService {
       val retrofit = Retrofit.Builder()
           .baseUrl("https://api.mapbox.com/geocoding/v5/")
           .addConverterFactory(GsonConverterFactory.create())
           .client(provideOkHttpClient())
           .build()
       return retrofit.create(ApiService::class.java)
   }
}
Setelah Retrofit sudah siap, saatnya membuat ViewModel untuk memanggil retrofit. Buat kelas baru dengan nama MainViewModel dan tuliskan kode berikut:

@FlowPreview
@ExperimentalCoroutinesApi
class MainViewModel : ViewModel() {
 
   private val accessToken = "ACCESS_TOKEN_ANDA"
   val queryChannel = BroadcastChannel<String>(Channel.CONFLATED)
 
   val searchResult = queryChannel.asFlow()
           .debounce(300)
           .distinctUntilChanged()
           .filter {
               it.trim().isNotEmpty()
           }
           .mapLatest {
               ApiConfig.provideApiService().getCountry(it, accessToken).features
           }
           .asLiveData()
}
Jangan lupa untuk mengubah value pada variabel accessToken dengan token yang Anda dapatkan dari Mapbox.

Sehingga struktur package sekarang menjadi seperti ini:
20200814092409d32071bb28df124234bb1868671d8f9d.jpeg
Terakhir, masuk ke MainActivity dan inisialisasi viewmodel terlebih dahulu:

class MainActivity : AppCompatActivity() {
 
   val viewModel : MainViewModel by viewModels()
 
   override fun onCreate(savedInstanceState: Bundle?) {
       super.onCreate(savedInstanceState)
       setContentView(R.layout.activity_main)
   }
}
Selanjutnya kirimkan query ketika form diisi dengan kode berikut:
class MainActivity : AppCompatActivity() {
 
   val viewModel : MainViewModel by viewModels()
 
   override fun onCreate(savedInstanceState: Bundle?) {
       super.onCreate(savedInstanceState)
       setContentView(R.layout.activity_main)
 
       val edPlace = findViewById<AutoCompleteTextView>(R.id.ed_place)
 
       edPlace.addTextChangedListener(object : TextWatcher {
           override fun afterTextChanged(s: Editable?) {
           }
           override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
           }
           override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
               lifecycleScope.launch {
                   viewModel.queryChannel.send(s.toString())
               }
           }
       })
   }
}
Terakhir, ambil hasil pencarian dari model dan tampilkan di AutoCompleteTextView seperti ini:

class MainActivity : AppCompatActivity() {
 
   ...
 
   override fun onCreate(savedInstanceState: Bundle?) {
 
       ...
 
       viewModel.searchResult.observe(this, Observer { placesItem ->
           val placesName = arrayListOf<String?>()
           placesItem.map {
               placesName.add(it.placeName)
           }
           val adapter = ArrayAdapter(this@MainActivity, android.R.layout.select_dialog_item, placesName)
           adapter.notifyDataSetChanged()
           edPlace.setAdapter(adapter)
       })
   }
}
Sehingga hasil akhir kode pada MainActivity akan terlihat seperti ini:

class MainActivity : AppCompatActivity() {
 
   val viewModel : MainViewModel by viewModels()
 
   override fun onCreate(savedInstanceState: Bundle?) {
       super.onCreate(savedInstanceState)
       setContentView(R.layout.activity_main)
 
       edPlace.addTextChangedListener(object : TextWatcher {
           override fun afterTextChanged(s: Editable?) {
           }
 
           override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
           }
 
           override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
               lifecycleScope.launch {
                   viewModel.queryChannel.send(s.toString())
               }
           }
       })
 
       viewModel.searchResult.observe(this, Observer { placesItem ->
           val placesName = arrayListOf<String?>()
           placesItem.map {
               placesName.add(it.placeName)
           }
           val adapter = ArrayAdapter(this@MainActivity, android.R.layout.select_dialog_item, placesName)
           adapter.notifyDataSetChanged()
           edPlace.setAdapter(adapter)
       })
   }
}
Karena membutuhkan akses internet, jangan lupa menambahkan permission pada AndroidManifest seperti berikut:

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
   package="com.dicoding.myreactivesearch">
 
   <uses-permission android:name="android.permission.INTERNET"/>
 
   <application
       ...
   </application>
 
</manifest>
Hore! Sekarang Anda sudah dapat menjalankan projek ini dan melihat hasilnya:
20201105142641f5e39e2de398db73e087da8aa10512eb.gifAnda sudah dapat menerapkan flow untuk melakukan pencarian API secara dinamis. Mantap!

Bedah Kode 
Konfigurasi Retrofit
Secara keseluruhan, konfigurasi Retrofit hampir sama dengan modul yang sudah kita pelajari sebelumnya. Apa bedanya? Sekarang ApiService memiliki Query dan Path. Apa itu?

@GET("mapbox.places/{query}.json")
suspend fun getCountry(
   @Path("query") query: String,
   @Query("access_token") accessToken: String,
   @Query("autocomplete") autoComplete: Boolean = true
): PlaceResponse

Lihatlah kembali endpoint API yang Anda gunakan :

https://api.mapbox.com/geocoding/v5/mapbox.places/{KATA_KUNCI_TEMPAT}.json?access_token={ACCESS_TOKEN_ANDA}&autocomplete=true

Kita bagi Endpoint tersebut menjadi 4 bagian:

Base URL : https://api.mapbox.com/geocoding/v5/ yaitu URL dasar yang tidak berubah-ubah, kita mendefinisikannya di dalam kelas ApiConfig.

Endpoint URL : mapbox.places/{KATA_KUNCI_TEMPAT}.json, bagian yang di dalam tanda kurung kurawal merupakan Path karena kita perlu mengubah isinya setiap kali melakukan pencarian. Di dalam Retrofit untuk mengisinya menggunakan @Path.

Query 1 : access_token={ACCESS_TOKEN_ANDA}, untuk awal query selalu menggunakan tanda tanya (?). Di dalam Retrofit, untuk mengisinya menggunakan @Query.

Query 2 : autocomplete=true, untuk memisahkan antar query selalu menggunakan tanda dan (&). Di dalam Retrofit caranya sama dengan query 1. Hanya saja karena kita selalu menginginkan autoComplete bernilai True maka kita bisa memberikan default value seperti cara di atas.

Apa beda AutoComplete yang bernilai True dan False?

Jika memilih False maka kita hanya mencari tempat yang awalnya sesuai dengan yang kita ketik saja. Misal “coding” maka yang muncul hanya “Codingle”, CodingSans” dan “Codington”. 

Jika memilih True maka kita juga mencari tempat yang mengandung kata-kata yang kita ketik. Misal “coding, maka yang muncul bisa jadi “Dicoding”, “YukCoding,  “Coding Road”.

Anda bisa melihat documentation untuk lebih jelasnya : https://docs.mapbox.com/api/search/#geocoding



BroadcastChannel dan Flow pada ViewModel
Lihatlah kode berikut pada MainViewModel:

val queryChannel = BroadcastChannel<String>(Channel.CONFLATED)
BroadcastChannel digunakan untuk membuat channel yang bertujuan untuk berkomunikasi antar coroutine, seperti mengirim dan menerima value. Berbeda dengan Flow yang merupakan cold stream, Channel merupakan contoh dari hot stream. Sehingga Anda dapat mengirimkan data dari luar channel tersebut.

Selanjutnya perhatikan tipe yang digunakan di sini yaitu CONFLATED, artinya hanya nilai terakhir saja yang disimpan, sedangkan untuk nilai yang sebelumnya dihiraukan. Secara garis besar, ia mirip seperti LiveData, hanya saja dibutuhkan Coroutine untuk membacanya

Catatan :
BroadcastChannel merupakan fitur yang masih dalam perkembangan dan masih bisa berubah-ubah sebelum stable release. Karena itulah kita berikan flag seperti ini:

@FlowPreview
@ExperimentalCoroutinesApi

Kemudian untuk mengirimkan broadcast dari MainActivity, cukup menggunakan fungsi send() seperti berikut:

lifecycleScope.launch {
viewModel.queryChannel.send(s.toString())
}
Untuk melakukan fungsi ini Anda harus melakukannya di dalam Coroutine. Karena itulah kita menggunakan lifecycleScope yang didapat dari library lifecycle-runtime-ktx. lifecycleScope digunakan untuk membuat scope coroutine yang aware terhadap lifecycle. Sehingga ketika lifecycle dihapus -seperti dalam keadaan onPause/onStop- maka Coroutine juga akan dibersihkan. Alhasil, aplikasi terhindar dari memory leak.

Selanjutnya lihatlah kode berikut pada MainViewModel:

val searchResult = queryChannel.asFlow()
       .debounce(300)
       .distinctUntilChanged()
       .filter {
           it.trim().isNotEmpty()
       }   
       .mapLatest {
           ApiConfig.provideApiService().getCountry(it, accessToken).features
       }
       .asLiveData()
Berikut ini adalah fungsi dari masing-masing operator:

asFlow : Membuat kita bisa mengubah channel menjadi Flow. 

debounce : Memastikan agar eksekusi selanjutnya berjalan jika ada jeda 300 millisecond. Hal ini akan sangat bermanfaat ketika melakukan pencarian. Dengan menggunakan debounce, Anda mencegah aplikasi untuk melakukan request API di setiap kali mengetikkan huruf, namun menunggu kata tersebut diketik terlebih dahulu. Hal ini tentunya akan menghemat bandwith dan memberikan user experience yang menyenangkan bagi pengguna.
2020081409241116305d0e5a24b5e6a6d2c06a77ad2031.jpeg

distincUntilChanged : Berfungsi kala request sebelumnya dengan sekarang, sama. Jadi, tidak perlu melakukan request lagi. Misalnya pengguna menulis “dico”, kemudian menghapus satu huruf menjadi “dic”, kemudian menulis lagi menjadi “dico”. Karena setelah 300 millisecond nilainya sama, maka aplikasi tidak akan melakukan request lagi.

filter : melakukan filter jika yang diketik hanya spasi atau masih kosong, sehingga bisa mencegah melakukan request yang tidak berguna.

mapLatest : Berfungsi kala  melakukan transformasi flow menjadi data yang baru dengan hanya menghasilkan nilai terakhir, sehingga ketika ada nilai baru maka data yang lama akan digantikan.

asLiveData : Mengubah Flow menjadi LiveData, merupakan extension yang di dapat dari library lifecycle-livedata-ktx.

Selamat Anda sudah belajar membuat reactive search dengan menerapkan Reactive Programming. Masih banyak hal lain yang bisa kita eksplorasi dengan menggunakan Coroutine Flow. Kita akan melanjutkan perjalanan kita bersama Flow pada modul berikutnya. Semangat!

Untuk mendalami lebih lanjut Anda dapat melihat tautan berikut:

Coroutine MapLatest

Deepdive into Reactive Spring with Coroutines and Kotlin Flow by Sébastien Deleuze

Lessons learnt using Coroutines Flow in the Android Dev Summit 2019 app


Source code dapat Anda unduh di: